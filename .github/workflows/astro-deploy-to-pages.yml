# @format

# Sample workflow for building and deploying an Astro site to GitHub Pages
#
# To get started with Astro see: https://docs.astro.build/en/getting-started/
#
name: Deploy Astro site to Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "." # default value when not using subfolders
  # BUILD_PATH: subfolder

jobs:
  check-commit:
    runs-on: ubuntu-latest
    outputs:
      ci_change: ${{ steps.github-script.outputs.is_relevant_commit }}
    steps:
      - name: Print commit message
        id: print-commit-msg
        run: |
          echo "commit_msg=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT
      - name: GitHub JS scripting
        id: github-script
        uses: actions/github-script@v7
        with:
          script: |
            const commitMsg = process.env.COMMIT_HEADER;
            const isCIChange = /^ci\((?:gitlab|gl)\):/i.test(commitMsg);
            core.setOutput('is_relevant_commit', isCIChange.toString());
        env:
          COMMIT_HEADER: ${{ steps.print-commit-msg.outputs.commit_msg }}
  build:
    name: Build
    needs: check-commit
    if: ${{ github.event_name != 'push' || needs.check-commit.outputs.ci_change == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/pnpm-lock.yaml" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "command=install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "runner=pnpm dlx" >> $GITHUB_OUTPUT
            echo "lockfile=pnpm-lock.yaml" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package-lock.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Couldn't determine package manager. Maybe check your lockfile?"
            exit 1
          fi
      - name: Cache deps
        uses: actions/cache@v3
        with:
          path: |
            .astro
            node_modules
          key: ${{ runner.os }}-astro-${{ github.repository_id }}-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-astro-${{ github.repository_id }}-
            ${{ runner.os }}-backup-astro-cache-${{ github.repository_id }}
      - name: Setup pnpm
        if: ${{ steps.detect-package-manager.outputs.manager == 'pnpm' }}
        uses: pnpm/action-setup@v4
        with:
          version: "9.6"
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}
      - name: Build with Astro
        run: |
          ${{ steps.detect-package-manager.outputs.runner }} astro build \
            --site "${{ steps.pages.outputs.origin }}" \
            --base "${{ steps.pages.outputs.base_path }}"
        working-directory: ${{ env.BUILD_PATH }}
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy -> GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
